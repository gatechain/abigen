import ContractAbstract, {BigNumber, IOption} from "web3-contract/dist/contract/ContractAbstract.js";

export class {{contractName}}Contract extends ContractAbstract {
    public static contractName = '{{contractName}}Contract';
		constructor(props: any) {
			super(props)
		}
		{{#each methods}}
		{{#ifEquals languageSpecificName "name"}}
		{{else}}
		{{#ifEquals this.stateMutability "view" }}
	  public {{languageSpecificName}}({{> typed_params_signer inputs=this.inputs}}
			const [address] = this.parseOption(opt)
			const provider = this.getContractProvider(address)
			return provider.{{languageSpecificName}}({{> params inputs=this.inputs}}
		{{else}}
	  public async {{languageSpecificName}}({{> typed_params_signer inputs=this.inputs}}
			const [address, rest] = this.parseOption(opt)
			const __signer = this.getContractSigner(address)
			const _opt = rest
			let  gasLimit: any = null
			try {
				gasLimit = await __signer.estimateGas.{{languageSpecificName}}({{#each inputs}}{{name}},{{/each}}_opt)
        gasLimit = gasLimit.mul(120).div(100)
			} catch (error) {
			console.log(error)
			}
			const options = Object.assign({
				gasLimit
			}, _opt)

			return __signer.{{languageSpecificName}}({{> params_signer inputs=this.inputs}}
		{{/ifEquals}}
		};
		{{/ifEquals}}
		{{/each}}
		Abi = {{{ABIString}}} 
}

